def check_brackets(brackets_row: str) -> bool:
    """
    Check whether input string is a valid bracket sequence
    Valid examples: "", "()", "()()(()())", invalid: "(", ")", ")("
    :param brackets_row: input string to be checked
    :return: True if valid, False otherwise
    """
    """
    Если строка пустая - сразу возвращаем True.
    Строка должна иметь четное число элементов иначе возвращаем False.
    В данном случае подразумевается, что в строке нет других символов, кроме скобок.
    """
    length = len(brackets_row)
    if length == 0:
        return True
    elif length % 2 == 1:
        return False

    """
    Далее проверяем всю строку посимвольно.
    Берем очередной элемент, если это открывающая скобка, то увеличиваем счетчик a на единицу
    Если закрывающая, то уменьшаем
    По окончании проверки счетчик должен иметь нулевое значение.
    Например такая последовательность "(()(": первый элемент a=1, второй элемент a=2, третий элемент a=1, четвертый
    элемент a=2. Проверка закончилась и мы имеем значение счетчика не равное нулю, значит последовательность с ошибкой.
    А вот если бы последняя скобка была закрывающей, мы бы уменьшили счетчик на единицу и он стал бы равен нулю.
    Если вдруг счетчик стал меньше нуля, то это тоже считается ошибкой и проверка прекращается, так как все предыдущие
    скобки парные, а эта закрывающая, что тоже неправильно
    Была мысль использовать стек для этого, но со счетчиком получается быстрее
    """
    a = 0
    for i in brackets_row:
        if i == "(":
            a += 1
        elif i == ")":
            a -= 1
        if a < 0:
            return False
    if a == 0:
        return True
    return False
